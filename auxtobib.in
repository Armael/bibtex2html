#!@PERL@

# auxtobib takes the name of a main .aux file (as generated by LaTeX)
# as argument.  It extracts all the citations contained in the aux
# file, recursively descending into included aux files (as generated
# by the LaTeX \include directive), and uses this list to extract a
# BibTeX file containing only the cited references, including the
# needed string abbreviations and crossreferences. The names of the
# BibTeX files are taken from the main aux file, and are searched in the
# directories specified by the BIBINPUTS environment variable.
#
# Needs bib2bib (see http://www.lri.fr/~filliatr/bibtex2html).
#
# Ralf Treinen <treinen@debian.org>.
# Published under the Gnu General Public Licence, version 2.

# process arguments
if ( $#ARGV != 0 ) {die "Usage: <aux-file>";}
$mainauxfile = $ARGV[0];

# process the aux files
sub dofile {
	local($filename, $handle) = @_;
	$handle++;
	open($handle,$filename) || die "Cannot open file $filename";
	while (<$handle>){
		if (/\\\@input\{(.*)\}/) {
			&dofile($1,$handle);
			next;
		}
		if (/\\citation\{(.*)\}/) {
			$keys{$1} = 0;
			next;
		}
		if (/\\bibdata\{(.*)\}/) {
			@bibfiles = split(/,/,$1);
		}
	}
	close $handle;
}
&dofile($mainauxfile,'handle00');

# build the expression for the search condition
$condfile="/tmp/aux2bib$$";
open(COND,"> $condfile") || die "Cannot open temp file $condfile";
foreach $key (keys %keys){
	print COND "\$key=\"$key\" or ";
}
print COND "1=2\n";
close COND;

# build a string containing the path names of the bib files, by searching
# the files in the directories given in yn the BIBINPUTS environment
# variable.
$bibfilestring = "";
@searchdirs = split(/:/,$ENV{'BIBINPUTS'});
foreach $bibfile (@bibfiles) {
	foreach $bibdir (@searchdirs) {
		next if $bibdir =~ /^$/;
		if (-e "$bibdir/$bibfile.bib") {
			$bibfilestring .= "$bibdir/$bibfile.bib ";
			last;
		}
	}
}

# call bib2bib
open(CMD,"bib2bib -c \"`cat $condfile`\" $bibfilestring|");
while (<CMD>){print;}
close(CMD);

# cleanup
unlink($condfile);
