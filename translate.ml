(*
 * Translate BibTeX entries into HTML documents.
 *)

(* options *)

let nodoc = ref false
let suffix = ref ".html"
let title = ref ""
let title_spec = ref false
let debug = ref false

(* first pass to get the crossrefs *)

let (cite_tab : (string,string) Hashtbl.t) = Hashtbl.create 17

let cpt = ref 0

let first_pass l =
  let rec pass = function
      [] -> ()
    | (None,_,(_,k,_))::rem ->
	incr cpt;
	Hashtbl.add cite_tab k (string_of_int !cpt);
	pass rem
    | (Some c,_,(_,k,_))::rem ->
	Hashtbl.add cite_tab k c;
	pass rem
  in
    cpt := 0;
    Hashtbl.clear cite_tab;
    pass l


(* latex2html : to print LaTeX strings in HTML format *)

open Latexmacros

let in_summary = ref false
let directory = ref ""

let cite k =
  try
    let url =
      if !in_summary then 
	Printf.sprintf "#%s" k
      else
	Printf.sprintf "%s%s#%s" !directory !suffix k in
    let c = Hashtbl.find cite_tab k in
      print_s (Printf.sprintf "<A HREF=\"%s\">[%s]</A>" url c)
  with
      Not_found -> print_s "[?]"
;;

def "\\cite" [ Raw_arg cite ];;
def "\\etalchar" [ Print "<sup>" ; Raw_arg print_s ; Print "</sup>" ];;
def "\\newblock" [Print " "];;

let latex_url u =
  print_s (Printf.sprintf "<A HREF=\"%s\">%s</A>" u u);;
  
def "\\url" [Raw_arg latex_url];;

let latex2html ch s =
  Latexmacros.out_channel := ch;
  Latexscan.main (Lexing.from_string s)

let safe_title e =
  try Bibtex.get_title e with Not_found -> "No title"


(* footer of HTML files *)

let own_address = "http://www.lri.fr/~filliatr/bibtex2html.en.html"

let footer ch =
  Html.open_balise ch "HR";
  Html.open_balise ch "I";
  output_string ch "This file has been generated by ";
  Html.open_href ch own_address;
  output_string ch "bibtex2html";
  Html.close_href ch

(* links (other than BibTeX entry, when available) *)

let file_type f =
  if List.exists (fun s -> Filename.check_suffix f s) 
    [ ".dvi" ; ".dvi.gz" ; ".dvi.Z" ] then 
    "DVI"
  else if List.exists (fun s -> Filename.check_suffix f s) 
    [ ".ps" ; ".ps.gz" ; ".ps.Z" ] then
    "PS"
  else
    "Available here"

let rec is_url s =
  (String.length s > 3 & String.lowercase (String.sub s 0 4) = "http")
  or  (String.length s > 2 & String.lowercase (String.sub s 0 3) = "ftp")
  or  (String.length s > 3 & String.lowercase (String.sub s 0 4) = "www:")

let get_url s =
  if (String.length s > 3 & String.lowercase (String.sub s 0 4) = "www:") then
    String.sub s 4 (String.length s - 4)
  else
    s

let make_links ch ((t,k,_) as e) =
  (* URL's *)
  List.iter (fun u -> 
	       try
		 let u = Bibtex.get_field e u in
		 let s = file_type u in
		   output_string ch ", ";
		   Html.open_href ch (get_url u);
		   output_string ch s;
		   Html.close_href ch
	       with Not_found -> ())
    [ "FTP"; "HTTP"; 
      "URL" ; "URL0" ; "URL1" ; "URL2" ; "URL3"; "URL4" ; "URL5" ;
      "DVI" ; "PS" ; "DOCUMENTURL" ; "URLPS" ; "URLDVI" ];

  (* abstract *)
  begin
    try
      let a = Bibtex.get_field e "abstract" in
	if is_url a then begin
	  output_string ch ", ";
	  Html.open_href ch (get_url a);
	  output_string ch "Abstract";
	  Html.close_href ch;
	end else begin
	  Html.paragraph ch; output_string ch "\n";
	  Html.open_balise ch "blockquote"; output_string ch "\n";
	  latex2html ch a;
	  Html.close_balise ch "blockquote"; output_string ch "\n";
	  Html.paragraph ch; output_string ch "\n"
	end
    with Not_found -> ()
  end
  

(* summary file f.html *)

let one_entry_summary basen ch (_,b,((_,k,f) as e)) =
  if !debug then begin
    Printf.printf "[%s]" k; flush stdout
  end;
  output_string ch "\n\n";
  Html.open_balise ch "tr valign=top";

  output_string ch "\n";
  Html.open_balise ch "td";
  Html.anchor ch k;
  latex2html ch ("[" ^ (Hashtbl.find cite_tab k) ^ "]");

  output_string ch "\n";
  Html.open_balise ch "td";
  latex2html ch b;
  Html.open_balise ch "BR";
  output_string ch "\n";

  Html.open_href ch (Printf.sprintf "%s-bib.html#%s" !directory k);
  output_string ch "BibTeX entry";
  Html.close_href ch;
  make_links ch e;

  Html.paragraph ch;
  output_string ch "\n"

let summary basen el =
  let filename = basen ^ !suffix in
  Printf.printf "Making HTML document (%s)..." filename; flush stdout;
  let ch = open_out filename in
    if not !nodoc then
      Html.open_document ch (fun () -> output_string ch !title);
    if !title_spec then begin
      Html.open_balise ch "H1";
      output_string ch !title;
      Html.close_balise ch "H1"
    end;
    output_string ch "\n";
    Html.open_balise ch "table";
    in_summary := true;
    List.iter (one_entry_summary basen ch) el;
    in_summary := false;
    Html.close_balise ch "table";
    if not !nodoc then begin
      footer ch;
      Html.close_document ch
    end;
    close_out ch;
    Printf.printf "ok\n"; flush stdout
;;


(* HTML file with BibTeX entries f-bib.html *)

let bib_file f l =
  let fn = f ^ "-bib.html" in
  Printf.printf "Making HTML list of BibTeX entries (%s)..." fn;
  flush stdout;
  let ch = open_out fn in

  if not !nodoc then
    Html.open_document ch (fun _ -> output_string ch (f ^ ".bib"));

  Html.open_balise ch "H1";
  output_string ch (f ^ ".bib");
  Html.close_balise ch "H1";

  Html.open_balise ch "PRE";
  List.iter (fun (_,_,(t,k,fs)) ->
    Html.anchor ch k;
    output_string ch ("@" ^ t ^ "{" ^ k ^ ",\n");
    List.iter
      (fun (a,v) ->
	 output_string ch "  ";
	 output_string ch (String.lowercase a);
	 output_string ch " = ";
	 if a = "CROSSREF" then begin
	   output_string ch "{";
	   Html.open_href ch ("#" ^ v);
	   output_string ch v;
	   Html.close_href ch;
	   output_string ch "},\n"
	 end else
	   output_string ch ("{" ^ v ^ "},\n")
      ) fs;
    output_string ch "}\n") l;
  Html.close_balise ch "PRE";
  
  footer ch;
  if not !nodoc then Html.close_document ch;
  flush ch;
  close_out ch;
  Printf.printf "ok\n"; flush stdout


(* main function *)

let format_list f l =
  first_pass l;
  directory := f;
  summary f l;
  bib_file f l

